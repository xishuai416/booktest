package ${package.Controller};

import java.util.List;

import com.boot.common.base.PageReq;
import com.boot.common.base.BaseResp;
import com.boot.common.base.PageResp;
import com.boot.common.base.AjaxResult;
import com.boot.common.base.BusinessException;

import ${package.Model}.${model};
import ${package.Service}.${table.serviceName};

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 *
 * @author ${author}
 * @since ${date}
 */
@Api("$!{table.comment}:${table.entityPath} API")
#if(${restControllerStyle})
@RestController
#else
@RestController
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end
#else
#if(${superControllerClass})
public class ${table.controllerName} {
#else
public class ${table.controllerName} {
#end

	public static final Logger log = LogManager.getLogger(${table.controllerName}.class);

	@Autowired
	private ${table.serviceName} ${table.entityPath}Service;
	
	/**
	 * 根据条件分页查询,返回datatables表格数据
	 * @param PageReq
	 * @return PageResp
	 * @author ${author}
	 */
	@ApiOperation(value = "findPage", notes = "表格分页查询")
	@PostMapping("/findPage")
	public PageResp<${model}> findPage(@RequestBody PageReq<${model}> pageReq){
		return ${table.entityPath}Service.findPage(pageReq);
	}
	
	/**
	 * 根据条件查询
	 * @param ${model}
	 * @return BaseResp<List<${model}>>
	 * @author ${author}
	 */
	@ApiOperation(value = "findList", notes = "根据条件查询列表")
	@PostMapping("/findList")
	public BaseResp<List<${model}>> findList(@RequestBody ${model} model){
	    BaseResp<List<${model}>> resp = new BaseResp<List<${model}>>();
		try{
	    	List<${model}> list = ${table.entityPath}Service.findList(model);
	    	resp.setAjaxResult(AjaxResult.SUCCESS);
	    	resp.setResult(list);
		}catch(BusinessException e) {
			//构造返回
			log.error(e.getMessage());
			throw new BusinessException(e);
		}
		return resp;
	}
	
	/**
	 * 新增数据
	 * @param ${model}
	 * @return BaseResp<${model}>
	 * @throws BusinessException
	 * @author ${author}
	 */
	@ApiOperation(value = "insert", notes = "新增数据")
	@PostMapping("/insert")
	public BaseResp<${model}> insert(@RequestBody ${model} model) throws BusinessException{
		BaseResp<${model}> resp = new BaseResp<${model}>();
		try{
			//initModel(model);
			boolean result = ${table.entityPath}Service.insert(model);
			if(result){
				resp.setAjaxResult(AjaxResult.SUCCESS);
				resp.setResult(model);
			}else{
				resp.setAjaxResult(AjaxResult.SYSTEM_ERROR);
				resp.setResultName(${model}.class.getSimpleName());
		    	resp.setSingleErrorMessage(AjaxResult.SYSTEM_ERROR_STR, "新增失败！");
			}
		}catch(BusinessException e) {
			log.error(e.getMessage());
			throw new BusinessException(e);
		}
		return resp;
	}
	
	/**
	 * 根据主键修改记录
	 * @param ${model}
	 * @return BaseResp<${model}>
	 * @throws BusinessException
	 * @author ${author}
	 */
    @ApiOperation(value = "update", notes = "根据主键修改记录")
	@PostMapping("/update")
	public BaseResp<${model}> update(@RequestBody ${model} model) throws BusinessException{
		BaseResp<${model}> resp = new BaseResp<${model}>();
		try{
			//initModel(model);
			boolean result = ${table.entityPath}Service.update(model);
			if(result){
				resp.setAjaxResult(AjaxResult.SUCCESS);
				resp.setResult(model);
			}else{
				resp.setAjaxResult(AjaxResult.SYSTEM_ERROR);
				resp.setResultName(${model}.class.getSimpleName());
		    	resp.setSingleErrorMessage(AjaxResult.SYSTEM_ERROR_STR, "修改失败");
			}
		}catch(BusinessException e) {
			//构造返回
			log.error(e.getMessage());
			throw new BusinessException(e);
		}
		return resp;
	}
	
	/**
	 * 根据主键删除记录
	 * @param Serializable
	 * @return BaseResp<Boolean>
	 * @throws BusinessException
	 * @author ${author}
	 */
	@ApiOperation(value = "delById", notes = "根据主键删除记录")
	@PostMapping("/delById/{id}")
	public BaseResp<Boolean> delById(@PathVariable("id") String id) throws BusinessException{
		BaseResp<Boolean> resp = new BaseResp<Boolean>();
		try{
			boolean result = ${table.entityPath}Service.delById(id);
			if(result){
				resp.setAjaxResult(AjaxResult.SUCCESS);
				resp.setResultName(${model}.class.getSimpleName());
				resp.setResult(true);
			}else{
				resp.setAjaxResult(AjaxResult.SYSTEM_ERROR);
				resp.setResultName(${model}.class.getSimpleName());
		    	resp.setSingleErrorMessage(AjaxResult.SYSTEM_ERROR_STR, "删除失败");
			}
		}catch(BusinessException e) {
			//构造返回
			log.error(e.getMessage());
			throw new BusinessException(e);
		}
		return resp;
	}
	
	/**
	 * 根据主键查找记录
	 * @param Serializable
	 * @return BaseResp<${model}>
	 * @author ${author}
	 */
	@ApiOperation(value = "findById", notes = "根据主键查找记录")
	@PostMapping("/findById/{id}")
	public BaseResp<${model}> findById(@PathVariable("id") String id){
		BaseResp<${model}> resp = new BaseResp<${model}>();
		try {
			${model} model = ${table.entityPath}Service.findById(id);
			resp.setAjaxResult(AjaxResult.SUCCESS);
			resp.setResult(model);
		}catch(BusinessException e) {
			log.error(e.getMessage());
			throw new BusinessException(e);
		}
		return resp;
	}
	
}

#end